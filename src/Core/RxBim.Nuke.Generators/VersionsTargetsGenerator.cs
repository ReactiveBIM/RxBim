namespace RxBim.Nuke.Generators
{
    using System;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis;
    using static Constants;

    /// <summary>
    /// Generates NUKE targets for different versions of CAD/BIM applications.
    /// </summary>
    [Generator]
    public class VersionsTargetsGenerator : ISourceGenerator
    {
        private GeneratorExecutionContext _context;

        /// <inheritdoc />
        public void Initialize(GeneratorInitializationContext context)
        {
// #if DEBUG
//             Debugger.Launch();
// #endif
        }

        /// <inheritdoc />
        public void Execute(GeneratorExecutionContext context)
        {
            _context = context;
            var appVersion = _context.Compilation.GetTypeByMetadataName(AppVersionClassTypeName);
            var versionNumbers = GetVersionNumbers(appVersion);
            foreach (var versionNumber in versionNumbers)
            {
                var source = GetSource(versionNumber);
                _context.AddSource($"IVersionBuild{versionNumber}.g.cs", source);
            }
        }

        private static string GetSource(string versionNumber)
        {
            var source = $@"// <auto-generated/>
namespace RxBim.Nuke.Versions
{{
    using global::Nuke.Common;

    partial interface IVersionBuild
    {{
        Target SetupEnv{versionNumber} => _ => _
            .Before(Compile, Restore, Pack, Release, Prerelease, Publish)
            .Executes(() => this.SetupEnvironment(""{versionNumber}""));

        Target Compile{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}, Compile);

        Target Restore{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}, Restore);

        Target Pack{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}, Pack);

        Target Release{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}, Release);

        Target Prerelease{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}, Prerelease);

        Target Publish{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}, Publish);
    }}
}}";
            return source;
        }

        private IEnumerable<string> GetVersionNumbers(INamedTypeSymbol? appVersion)
        {
            if (appVersion is null)
                return Array.Empty<string>();

            return new[]
            {
                "2019",
                "2020",
                "2021",
                "2022"
            };
        }
    }
}