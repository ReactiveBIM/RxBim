namespace RxBim.Nuke.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using static Constants;

    /// <summary>
    /// Generates NUKE targets for different versions of CAD/BIM applications.
    /// </summary>
    [Generator]
    public class VersionsTargetsGenerator : ISourceGenerator
    {
        private GeneratorExecutionContext _context;

        /// <inheritdoc />
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            Debugger.Launch();
#endif
        }

        /// <inheritdoc />
        public void Execute(GeneratorExecutionContext context)
        {
            _context = context;
            var appVersion = _context.Compilation.GetTypeByMetadataName(AppVersionClassTypeName);
            if (appVersion is null)
                return;

            var versionNumbers = GetVersionNumbers(appVersion);
            foreach (var versionNumber in versionNumbers)
            {
                var source = GetSource(versionNumber);
                _context.AddSource($"IVersionBuild{versionNumber}.g.cs", source);
            }
        }

        private static IEnumerable<string> GetVersionNumbers(INamedTypeSymbol appVersion)
        {
            var appVersionValues = appVersion.GetMembers()
                .Where(x => x.IsStatic && x.Kind is SymbolKind.Field).Cast<IFieldSymbol>();

            appVersionValues.Select(x => x.DeclaringSyntaxReferences).First();

            return new[]
            {
                "2019",
                "2020",
                "2021",
                "2022",
                "2023"
            };
        }

        private static string GetSource(string versionNumber)
        {
            var source = $@"// <auto-generated/>
#pragma warning disable CS1591, SA1205, SA1600

namespace RxBim.Nuke.Versions
{{
    using global::Nuke.Common;

    partial interface IVersionBuild
    {{
        Target SetupEnv{versionNumber} => _ => _           
            .Executes(() => this.SetupEnvironment(""{versionNumber}""));

        Target Compile{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}).Triggers(Compile);

        Target Restore{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}).Triggers(Restore);

        Target Pack{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}).Triggers(Pack);

        Target Release{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}).Triggers(Release);

        Target Prerelease{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}).Triggers(Prerelease);

        Target Publish{versionNumber} => _ => _.DependsOn(SetupEnv{versionNumber}).Triggers(Publish);
    }}
}}";
            return source;
        }

        private static string GetVersionNumber(IFieldSymbol symbol)
        {
            var refs = symbol.DeclaringSyntaxReferences;
            var span = symbol.Locations.First().SourceSpan;
            var ref1 = refs.First();
            var syntax = (VariableDeclaratorSyntax)ref1.SyntaxTree.GetRoot().FindNode(span);
            var innerSyntax = (EqualsValueClauseSyntax)syntax.ChildNodes().First();
            var objCreation = (ImplicitObjectCreationExpressionSyntax)innerSyntax.ChildNodes().First();
            var ttt = objCreation.ArgumentList.Arguments;
            var argumentsSyntax = (ArgumentListSyntax)objCreation.ChildNodes().First();
            var appVerArg = argumentsSyntax.ChildNodes().Cast<ArgumentSyntax>().ElementAt(2);
            var argCreation = (ObjectCreationExpressionSyntax)appVerArg.ChildNodes().First();
            var argType = (IdentifierNameSyntax)argCreation.Type;
            var isAppVer = argType.Identifier.Text.Equals("ApplicationVersion");
            var arg = argCreation.ArgumentList.Arguments.First();
            var exprSyntax = (LiteralExpressionSyntax)arg.Expression;
            
        }
    }
}