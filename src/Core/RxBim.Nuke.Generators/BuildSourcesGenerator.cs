namespace RxBim.Nuke.Generators
{
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Symbols;

    /// <summary>
    /// Generates source for Build class.
    /// </summary>
    [Generator]
    public class BuildSourcesGenerator : ISourceGenerator
    {
        /// <inheritdoc />
        public void Initialize(GeneratorInitializationContext context)
        {
// #if DEBUG
//             Debugger.Launch();
// #endif
        }

        /// <inheritdoc />
        public void Execute(GeneratorExecutionContext context)
        {
            var build = context.Compilation.GetTypeByMetadataName("Build");
            if (build is null || !context.CheckAssembly(build))
                return;

            var propsSource = GetBuildVerPropsSource();

            context.AddSource("Build.Versions.Properties.g.cs", propsSource);

            var gitHubActionsAttributes =
                build.GetAttributes().Where(x => x.AttributeClass is { Name: "GitHubActionsAttribute" }).ToList();

            if (!gitHubActionsAttributes.Any())
                return;

            if (!context.TryGetVersionNumbersFromExternalAssembly(out var versionNumbers))
                return;

            foreach (var versionNumber in versionNumbers)
            {
                var source = GetBuildVerActionsSource(gitHubActionsAttributes, versionNumber);
                context.AddSource($"Build.Versions.Actions{versionNumber}.g.cs", source);
            }
        }

        private static string GetBuildVerPropsSource()
        {
            return @"// <auto-generated>
using Nuke.Common;
using RxBim.Nuke.Versions;

/// <summary>
/// Build class.
/// </summary>
partial class Build : IVersionBuild
{
    /// <inheritdoc />
    [Parameter]
    public AppVersion AppVersion { get; set; }

    /// <inheritdoc />
    [Parameter]
    public AppVersionNumber AppVersionNumber { get; set; }
}";
        }

        private static string GetBuildVerActionsSource(
            List<AttributeData> gitHubActionsAttributes,
            string versionNumber)
        {
            foreach (var actionsAttribute in gitHubActionsAttributes)
            {
                var sourceSpan = actionsAttribute.ApplicationSyntaxReference?.Span;

#if DEBUG
                Debugger.Launch();
#endif

                var attNode = actionsAttribute.ApplicationSyntaxReference.SyntaxTree.GetRoot()
                    .FindNode(sourceSpan.Value);
                var text = attNode.GetText();
                
                var newNode = SyntaxFactory.Attribute(attNode.);
                
                    text.
                        @"GitHubActions("""
                    "InvokedTargets = new[] { "
            }

            return string.Empty;
        }
    }
}