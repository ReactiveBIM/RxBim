namespace RxBim.Nuke.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    /// <summary>
    /// Generates source for Build class.
    /// </summary>
    [Generator]
    public class BuildSourcesGenerator : ISourceGenerator
    {
        /// <inheritdoc />
        public void Initialize(GeneratorInitializationContext context)
        {
// #if DEBUG
//             Debugger.Launch();
// #endif
        }

        /// <inheritdoc />
        public void Execute(GeneratorExecutionContext context)
        {
            var build = context.Compilation.GetTypeByMetadataName("Build");
            if (build is null || !context.CheckAssembly(build))
                return;

            var propsSource = GetBuildVerPropsSource();

            context.AddSource("Build.Versions.Properties.g.cs", propsSource);

            var gitHubActionsAttributes =
                build.GetAttributes().Where(x => x.AttributeClass is { Name: "GitHubActionsAttribute" }).ToList();

            if (!gitHubActionsAttributes.Any())
                return;

            if (!context.TryGetVersionNumbersFromExternalAssembly(out var versionNumbers))
                return;

            foreach (var actionsAttribute in gitHubActionsAttributes)
            {
                var source = GetBuildVerActionsSource(actionsAttribute, versionNumbers, out var actionName);
                if (!string.IsNullOrEmpty(actionName))
                    context.AddSource($"Build.Versions.Actions.{actionName}.g.cs", source);
            }
        }

        private static string GetBuildVerPropsSource()
        {
            return @"// <auto-generated>
using Nuke.Common;
using RxBim.Nuke.Versions;

/// <summary>
/// Build class.
/// </summary>
partial class Build : IVersionBuild
{
    /// <inheritdoc />
    [Parameter]
    public AppVersion AppVersion { get; set; }

    /// <inheritdoc />
    [Parameter]
    public AppVersionNumber AppVersionNumber { get; set; }
}";
        }

        private string GetBuildVerActionsSource(
            AttributeData actionsAttribute,
            IEnumerable<string> versionNumbers,
            out string actionName)
        {
            actionName = string.Empty;
            var syntaxReference = actionsAttribute.ApplicationSyntaxReference;
            if (syntaxReference is null)
                return string.Empty;

            var rootNode = syntaxReference.SyntaxTree.GetRoot();

            var usingLines = rootNode.GetUsingLines();

            var sourceSpan = syntaxReference.Span;
            var attNode = rootNode.FindNode(sourceSpan);

            var nameTokenNullable = GetActionNameToken(attNode);
            if (!nameTokenNullable.HasValue)
                return string.Empty;

            var nameToken = nameTokenNullable.Value;

            var targetsInitializerNode = GetInvokeTargets(attNode);
            if (targetsInitializerNode is null)
                return string.Empty;

            actionName = nameTokenNullable.Value.ValueText;

            var attLines = versionNumbers
                .Select(versionNumber => attNode.ReplaceSyntax(
                    new[] { targetsInitializerNode },
                    (_, _) => GetInitializerNodeWithSetEnvTarget(targetsInitializerNode, versionNumber),
                    new[] { nameToken },
                    (_, _) => GetNameWithVersionToken(nameToken, versionNumber),
                    null,
                    null))
                .Select(newAttNode => $"[{newAttNode.GetText()}]")
                .ToList();

            return @$"{usingLines}
{string.Join(Environment.NewLine, attLines)}
partial class Build
{{
}}";
        }

        private SyntaxNode GetInitializerNodeWithSetEnvTarget(
            InitializerExpressionSyntax initializer,
            string versionNumber)
        {
            var valueText = $"{Constants.SetupEnv}{versionNumber}";
            var text = $"\"{valueText}\"";

            var newExpr = initializer.Expressions
                .Insert(0,
                    SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression,
                        SyntaxFactory.Token(SyntaxTriviaList.Empty,
                            SyntaxKind.StringLiteralToken,
                            text,
                            valueText,
                            SyntaxTriviaList.Empty)));

            return SyntaxFactory.InitializerExpression(SyntaxKind.ArrayInitializerExpression, newExpr);
        }

        private SyntaxToken? GetActionNameToken(SyntaxNode attNode)
        {
            var argumentSyntax = attNode
                .GetChildNode<AttributeArgumentListSyntax>()
                ?.GetChildNode<AttributeArgumentSyntax>(x => x.Expression is LiteralExpressionSyntax);

            return (argumentSyntax?.Expression as LiteralExpressionSyntax)?.Token;
        }

        private InitializerExpressionSyntax? GetInvokeTargets(SyntaxNode attNode)
        {
            var argumentSyntax = attNode
                .GetChildNode<AttributeArgumentListSyntax>()
                ?.GetChildNode<AttributeArgumentSyntax>(syntax =>
                    syntax.NameEquals != null &&
                    syntax.NameEquals.Name.ChildTokens().Any(token => token.ValueText.Equals("InvokedTargets")));

            if (argumentSyntax is null)
                return null;

            var arrayCreationExpressionSyntax = (ImplicitArrayCreationExpressionSyntax)argumentSyntax.Expression;
            var initializer = arrayCreationExpressionSyntax.Initializer;

            return initializer;
        }

        private SyntaxToken GetNameWithVersionToken(SyntaxToken nameToken, string versionNumber)
        {
            var valueText = $"{nameToken.ValueText}{versionNumber}";
            var text = $"\"{valueText}\"";
            var newNameToken = SyntaxFactory.Token(nameToken.LeadingTrivia,
                SyntaxKind.StringLiteralToken,
                text,
                valueText,
                nameToken.TrailingTrivia);
            return newNameToken;
        }
    }
}